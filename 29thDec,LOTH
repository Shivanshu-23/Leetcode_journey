1335. Minimum Difficulty of a Job Schedule
Hard

You want to schedule a list of jobs in d days. Jobs are dependent (i.e To work on the ith job, you have to finish all the jobs j where 0 <= j < i).
You have to finish at least one task every day. The difficulty of a job schedule is the sum of difficulties of each day of the d days. The difficulty of a day is the maximum difficulty of a job done on that day.
You are given an integer array jobDifficulty and an integer d. The difficulty of the ith job is jobDifficulty[i].
Return the minimum difficulty of a job schedule. If you cannot find a schedule for the jobs return -1.

 

Example 1:


Input: jobDifficulty = [6,5,4,3,2,1], d = 2
Output: 7
Explanation: First day you can finish the first 5 jobs, total difficulty = 6.
Second day you can finish the last job, total difficulty = 1.
The difficulty of the schedule = 6 + 1 = 7 
Example 2:

Input: jobDifficulty = [9,9,9], d = 4
Output: -1
Explanation: If you finish a job per day you will still have a free day. you cannot find a schedule for the given jobs.
Example 3:

Input: jobDifficulty = [1,1,1], d = 3
Output: 3
Explanation: The schedule is one job per day. total difficulty will be 3.
 

Constraints:

1 <= jobDifficulty.length <= 300
0 <= jobDifficulty[i] <= 1000
1 <= d <= 10

SOLOTION :- 
public class Solution {
    // Method to find the minimum difficulty to finish jobs in 'd' days
    public int minDifficulty(int[] jobDifficulty, int d) {
        int n = jobDifficulty.length;
        
        // If the number of jobs is less than the required days, it's impossible to divide them
        if (n < d) return -1;

        // dp[i][j] represents the minimum difficulty to finish the first 'j+1' jobs in 'i+1' days.
        int[][] dp = new int[d][n];

        for (int i = 0; i < d; i++) {
            for (int j = i; j < n; j++) {
                if (i == 0) {
                    // Base case for the first day
                    if (j == 0) {
                        dp[i][j] = jobDifficulty[j];
                    } else {
                        // For subsequent jobs on the first day, set to the maximum difficulty encountered
                        dp[i][j] = Math.max(dp[i][j - 1], jobDifficulty[j]);
                    }
                } else {
                    // For subsequent days
                    int maxDifficulty = jobDifficulty[j];
                    dp[i][j] = Integer.MAX_VALUE;

                    // Iterate from the current job to the first job on the previous day
                    for (int k = j; k >= i; k--) {
                        maxDifficulty = Math.max(maxDifficulty, jobDifficulty[k]);

                        // Update the minimum difficulty using the optimal substructure
                        dp[i][j] = Math.min(dp[i][j], dp[i - 1][k - 1] + maxDifficulty);
                    }
                }
            }
        }

        // Return the minimum difficulty to finish all jobs in 'd' days
        return dp[d - 1][n - 1];
    }
}
